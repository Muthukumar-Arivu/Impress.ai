from .constants import BOT_WELCOME_MESSAGE, PYTHON_QUESTION_LIST


def generate_bot_responses(message, session):
    bot_responses = []

    current_question_id = session.get("current_question_id")
    if not current_question_id:
        bot_responses.append(BOT_WELCOME_MESSAGE)

    success, error = record_current_answer(message, current_question_id)

    if not success:
        return [error]

    next_question, next_question_id = get_next_question(current_question_id)

    if next_question:
        bot_responses.append(next_question)
    else:
        final_response = generate_final_response(session)
        bot_responses.append(final_response)

    session["current_question_id"] = next_question_id
    session.save()

    return bot_responses

def record_current_answer(answer, current_question_id):
    if not answer:
        return False, "Please provide an answer to the question"
    session["answers"] = session.get("answers", {})
    session["answers"][current_question_id] = answer
    return True, ""

def get_next_question(current_question_id):
    question_index = current_question_id if current_question_id is not None else -1
    next_question_index = question_index + 1
    if next_question_index < len(PYTHON_QUESTION_LIST):
        next_question_id = next_question_index
        next_question = PYTHON_QUESTION_LIST[next_question_id]
        return next_question, next_question_id
    else:
        return None, -1

def generate_final_response(session):
    user_answers = session.get("answers", {})
    score = 0
    total_questions = len(PYTHON_QUESTION_LIST)
    for question_id, user_answer in user_answers.items():
        correct_answer = CORRECT_ANSWERS[question_id]
        if user_answer.lower() == correct_answer.lower():
            score += 1
    final_response = BOT_FINAL_RESPONSE.format(score, total_questions)
    return "final_response"
